# `feed` retrieves all links from the backend; 
# also allows for filter, sorting, and pagination args.
# Certain syntax are Prisma-specific (e.g. skip, take)
type Query {
  info: String!
  feed(
    filter: String
    skip: Int
    take: Int
    orderBy: LinkOrderByInput
  ): Feed!
}

type Feed {
  id: ID!
  links: [Link!]!
  count: Int!
}

# Allows sign-ups & authenticated users to create new links,
# login, and upvote a post
type Mutation {
  signup(
    email: String!
    password: String!
    name: String!
  ): AuthPayload
  post(url: String!, description: String!): Link!
  login(email: String!, password: String!): AuthPayload
  vote(linkId: ID!): Vote
}

# Allows realtime updates upon a new link/upvote
type Subscription {
  newLink: Link
  newVote: Vote
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
}

type Link {
  id: ID!
  description: String!
  url: String!
  postedBy: User
  votes: [Vote!]!
  createdAt: DateTime!
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}

input LinkOrderByInput {
  description: Sort
  url: Sort
  createdAt: Sort
}

enum Sort {
  asc
  desc
}

scalar DateTime
